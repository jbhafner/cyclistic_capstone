"casual", 4, 24.26048, "249,166",
"casual", 5, 24.72517, "270,611",
"casual", 6, 27.26022, "311,924",
"casual", 7, 32.13863, "410,699",
"member", 1, 13.90683, "408,859",
"member", 2, 11.90193, "494,575",
"member", 3, 12.01257, "576,753",
"member", 4, 11.92927, "586,458",
"member", 5, 12.01936, "589,588",
"member", 6, 12.47811, "531,598",
"member", 7, 13.9391, "472,855"
)
# Print the table in R Markdown
knitr::kable(data)
## Graph of average ride length
library(ggplot2)
library(lubridate)
# Create a plot of casual riders vs members ride time by day
data <- data.frame(
member_casual = c(rep("casual", 8), rep("member", 8)),
day_of_week = c(1:7, NA, 1:7, NA),
average_ride_length = c(32.75887,27.71345,25.08331,24.26048,24.72517,
27.26022,32.13863,NA,13.90683,11.90193,
12.01257,11.92927,12.01936,
12.47811,13.9391,NA)
)
# Remove NA as day of week
data <- data[!is.na(data$day_of_week), ]
# Change the day_of_week column to display "Sun", "Mon", ..., "Sat"
data$day_of_week <- wday(data$day_of_week, label = TRUE)
# Create a bar graph using ggplot2
ggplot(data, aes(x=day_of_week, y=average_ride_length, fill=member_casual)) +
geom_col(position="dodge") +
labs(x="Day of Week", y="Average Ride Length", fill="Member Type") +
theme_minimal()
install.packages('rsconnect')
library(rsconnect)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='brian-hafner', token='9C5F7EA8158C128C36FF84D4E9FB5085', secret='laaYGvu28VTGGodMFNDZirYS1y8xIFYVuaAciq5/')
library(rsconnect)
rsconnect::deployApp("/Users/bhafner/Documents/Learning/Google Data Analyst Course/Course 8-Capstone/Cyclistic Study/Cyclistic_report.html")
install.packages("rsconnect")
## Create Pivot tables
#  Pivot by Member type
# Assuming data is your DataFrame
library(dplyr)
pivot_member_type <- dplyr::group_by(.data, member_casual) %>% dplyr::summarize(average_ride_length = mean(ride_length, na.rm = TRUE)/60)
## Create Pivot tables
#  Pivot by Member type
# Assuming data is your DataFrame
library(dplyr)
pivot_member_type <- dplyr::group_by(data, member_casual) %>% dplyr::summarize(average_ride_length = mean(ride_length, na.rm = TRUE)/60)
str(data)
View(data)
# Read in cyclistic data from csv file
data <- read.csv("2023_data_cyclistic.csv")
temp <- head(data)
View(temp)
# Create pivot table
pivot_bike_type <- data %>%
filter(!is.na(rideable_type)) %>%
group_by(rideable_type) %>%
summarise(
num_rides = n()
)
View(pivot_bike_type)
View(pivot_bike_type)
# Create pivot table
pivot_bike_type <- data %>%
filter(!is.na(rideable_type)) %>%
group_by(rideable_type) %>%
summarise(
num_rides = n()
)
# Create a bar graph of number of rides per month using ggplot2
# Note: use this to scale in units of 1,000
# scale_y_continuous(labels = function(y) y / 1000)
ggplot(pivot_bike_type, aes(x=rideable_type, y=num_rides, fill=member_casual)) +
geom_col(position="dodge") +
ggtitle("Total Number of Rides by Bike Type") +
labs(x="Month of Year", y="Number of Rides (in thousands)", fill="Member Type") +
scale_y_continuous(labels = function(y) y / 1000) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_text(vjust = -1)) +
theme(plot.title = element_text(hjust = 0.5))
#knitr::opts_chunk$set(message=FALSE, warning=FALSE)
### Load required packages
# List of packages
packages <- c(
"data.table",
"stringr",
"dplyr",
"ggplot2",
"lubridate",
"dplyr",
"tidyverse"
)
# Function to check and install packages
check_and_install <- function(pkg){
if(!pkg %in% installed.packages()){
install.packages(pkg)
}
}
# Apply the function to each package
sapply(packages, check_and_install)
# Load the packages
lapply(packages, library, character.only = TRUE)
### End Load Packages
# Create pivot table
pivot_bike_type <- data %>%
filter(!is.na(rideable_type)) %>%
group_by(rideable_type) %>%
summarise(
num_rides = n()
)
# Create a bar graph of number of rides per month using ggplot2
# Note: use this to scale in units of 1,000
# scale_y_continuous(labels = function(y) y / 1000)
ggplot(pivot_bike_type, aes(x=rideable_type, y=num_rides, fill=member_casual)) +
geom_col(position="dodge") +
ggtitle("Total Number of Rides by Bike Type") +
labs(x="Month of Year", y="Number of Rides (in thousands)", fill="Member Type") +
scale_y_continuous(labels = function(y) y / 1000) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_text(vjust = -1)) +
theme(plot.title = element_text(hjust = 0.5))
# Create pivot table
pivot_bike_type <- data %>%
filter(!is.na(rideable_type)) %>%
group_by(member_casual,rideable_type) %>%
summarise(
num_rides = n()
)
# Create a bar graph of number of rides per month using ggplot2
# Note: use this to scale in units of 1,000
# scale_y_continuous(labels = function(y) y / 1000)
ggplot(pivot_bike_type, aes(x=rideable_type, y=num_rides, fill=member_casual)) +
geom_col(position="dodge") +
ggtitle("Total Number of Rides by Bike Type") +
labs(x="Month of Year", y="Number of Rides (in thousands)", fill="Member Type") +
scale_y_continuous(labels = function(y) y / 1000) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_text(vjust = -1)) +
theme(plot.title = element_text(hjust = 0.5))
# Create a bar graph of number of rides per month using ggplot2
# Note: use this to scale in units of 1,000
# scale_y_continuous(labels = function(y) y / 1000)
ggplot(pivot_bike_type, aes(x=rideable_type, y=num_rides, fill=member_casual)) +
geom_col(position="dodge") +
ggtitle("Total Number of Rides by Bike Type in 2023") +
labs(x="Month of Year", y="Number of Rides (in thousands)", fill="Member Type") +
scale_y_continuous(labels = function(y) y / 1000) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_text(vjust = -1)) +
theme(plot.title = element_text(hjust = 0.5))
## Create Pivot tables
#  Pivot by Member type
# Assuming data is your DataFrame
library(dplyr)
pivot_member_type <- dplyr::group_by(data, member_casual) %>% dplyr::summarize(average_ride_length = mean(ride_length, na.rm = TRUE)/60)
knitr::kable(pivot_member_type)
getwd()
setwd("/Users/bhafner/Documents/Learning/Google Data Analyst Course/Course 8-Capstone/Cyclistic Study/")
dir()
getwd()
str_to_title("Question: How to convert casual riders to annual members")
library(stringr)
str_to_title("Question: How to convert casual riders to annual members")
getwd()
data <- read.csv("./data/2023_data_cyclistic.csv")
temp <- read.csv("./data/2023_data_cyclistic.csv, nrow=10")
temp <- read.csv("./data/2023_data_cyclistic.csv", nrows=10)
View(temp)
write.csv(temp,"temp_data.csv")
# Check the structure of the data
str(data)
head(airquality)
mean(airquality$Solar.R) # N/A
mean(airquality$Ozone) # N/A
mean(airquality$Wind) # OK
New_df$Ozone <- ifelse(is.na(New_df$Ozone), median(New_df$Ozone, na.rm = TRUE), New_df$Ozone)
# Handle missing values
New_df <- data
# Check if there are NA values in the 'Ozone' column
if (any(is.na(New_df$Ozone))) {
New_df$Ozone <- ifelse(is.na(New_df$Ozone), median(New_df$Ozone, na.rm = TRUE), New_df$Ozone)
}
# Check if there are NA values in the 'Solar.R' column
if (any(is.na(New_df$Solar.R))) {
New_df$Solar.R <- ifelse(is.na(New_df$Solar.R), median(New_df$Solar.R, na.rm = TRUE), New_df$Solar.R)
}
# Check the cleaned data
head(New_df)
summary(New_df)
boxplot(New_df)
# Check if there are NA values in the 'Ozone' column
if (any(is.na(data$Ozone))) {
data$Ozone <- ifelse(is.na(data$Ozone), median(data$Ozone, na.rm = TRUE), data$Ozone)
}
# Check if there are NA values in the 'Solar.R' column
if (any(is.na(data$Solar.R))) {
data$Solar.R <- ifelse(is.na(data$Solar.R), median(data$Solar.R, na.rm = TRUE), data$Solar.R)
}
# Check the cleaned data
head(data)
summary(data)
boxplot(data)
temp <- head(data)
View(temp)
# Check the structure of the data
str(data)
getwd()
temp_raw <- read.csv("./doc/data-Raw/202301-divvy-tripdata.csv")
list.files(path = "./doc/data-Raw/")
temp_raw <- read.csv(head("/Users/bhafner/Documents/Learning/Google Data Analyst Course/Course 8-Capstone/Cyclistic Study/data-Raw/202301-divvy-tripdata.csv"))
View(temp_raw)
View(temp_raw)
# Check the structure of the data
str(data)
# Create pivot table
pivot_avg_by_day <- data %>%
group_by(member_casual, day_of_week) %>%
summarize(average_ride_length = mean(ride_length, na.rm = TRUE)/60, .groups = "keep")
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(lubridate)
# Create pivot table
pivot_avg_by_day <- data %>%
group_by(member_casual, day_of_week) %>%
summarize(average_ride_length = mean(ride_length, na.rm = TRUE)/60, .groups = "keep")
# Remove NA as day of week
pivot_avg_by_day <- pivot_avg_by_day[!is.na(pivot_avg_by_day$day_of_week), ]
# Change the day_of_week column to display "Sun", "Mon", ..., "Sat"
pivot_avg_by_day$day_of_week <- lubridate::wday(pivot_avg_by_day$day_of_week, label = TRUE)
# Create a bar graph using ggplot2
ggplot(pivot_avg_by_day, aes(x=day_of_week, y=average_ride_length, fill=member_casual)) +
geom_col(position="dodge") +
ggtitle("Average Ride Time by Day of Week") +
labs(x="Day of Week", y="Average Ride Length", fill="Member Type") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Load necessary libraries
library(ggplot2)
library(lubridate)
# Create pivot table
pivot_avg_by_month <- data %>%
group_by(member_casual, month_of_year) %>%
summarize(average_ride_length = mean(ride_length, na.rm = TRUE)/60, .groups = "keep")
# Remove NA as day of week
pivot_avg_by_month <- pivot_avg_by_month[!is.na(pivot_avg_by_month$month_of_year), ]
# Create a bar graph of average ride time per month using ggplot2
ggplot(pivot_avg_by_month, aes(x=month_of_year, y=average_ride_length, fill=member_casual)) +
geom_col(position="dodge") +
ggtitle("Average Ride Time by Month") +
labs(x="Month of Year", y="Average Ride Length", fill="Member Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_text(vjust = -1)) +
theme(plot.title = element_text(hjust = 0.5))
## Total Number of rides for users by day_of_week
# Create pivot table
pivot_user_count_by_day <- data %>%
filter(!is.na(day_of_week)) %>%
group_by(member_casual, day_of_week) %>%
summarise(
average_ride_length = mean(ride_length, na.rm = TRUE)/60,
num_rides = n()
)
# Remove NA as day of week
pivot_user_count_by_day <- pivot_user_count_by_day[!is.na(pivot_user_count_by_day$day_of_week), ]
# Change the day_of_week column to display "Sun", "Mon", ..., "Sat"
pivot_user_count_by_day$day_of_week <- lubridate::wday(pivot_user_count_by_day$day_of_week, label = TRUE)
# Create a bar graph of number of rides per month using ggplot2
# Note: use this to scale in units of 1,000: scale_y_continuous(labels = function(y) y / 1000)
ggplot(pivot_user_count_by_day, aes(x=day_of_week, y=num_rides, fill=member_casual)) +
geom_col(position="dodge") +
ggtitle("Total Number of Rides by Day") +
labs(x="Day of Week", y="Number of Rides (in thousands)", fill="Member Type") +
scale_y_continuous(labels = function(y) y / 1000) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_text(vjust = -1)) +
theme(plot.title = element_text(hjust = 0.5))
## Avg ride lengths & Number of rides for users by day_of_week
# Create pivot table
pivot_user_count_by_month <- data %>%
filter(!is.na(month_of_year)) %>%
group_by(member_casual, month_of_year) %>%
summarise(
average_ride_length = mean(ride_length, na.rm = TRUE)/60,
num_rides = n()
)
# Create a bar graph of number of rides per month using ggplot2
# Note: use this to scale in units of 1,000: scale_y_continuous(labels = function(y) y / 1000)
ggplot(pivot_user_count_by_month, aes(x=month_of_year, y=num_rides, fill=member_casual)) +
geom_col(position="dodge") +
ggtitle("Total Number of Rides by Month") +
labs(x="Month of Year", y="Number of Rides (in thousands)", fill="Member Type") +
scale_y_continuous(labels = function(y) y / 1000) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_text(vjust = -1)) +
theme(plot.title = element_text(hjust = 0.5))
# Load required libraries
library(knitr)
library(tibble)
# List out average ride length and number of rides summarized by casual/member rider and day of the week.
# Create a dataframe with Member/Casual, Avg Ride Lenght, and Number of Rides
summary_data <- tribble(
~member_casual, ~day_of_week, ~average_ride_length_min, ~num_rides,
"casual", 1, 32.75887, "335,716",
"casual", 2, 27.71345, "234,828",
"casual", 3, 25.08331, "246,224",
"casual", 4, 24.26048, "249,166",
"casual", 5, 24.72517, "270,611",
"casual", 6, 27.26022, "311,924",
"casual", 7, 32.13863, "410,699",
"member", 1, 13.90683, "408,859",
"member", 2, 11.90193, "494,575",
"member", 3, 12.01257, "576,753",
"member", 4, 11.92927, "586,458",
"member", 5, 12.01936, "589,588",
"member", 6, 12.47811, "531,598",
"member", 7, 13.9391, "472,855"
)
# Print the table in R Markdown
knitr::kable(summary_data)
View(data)
temp <- head(data)
View(temp)
View(pivot_avg_by_day)
View(summary_data)
View(pivot_avg_by_day)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(lubridate)
# Create pivot table
pivot_avg_by_day <- data %>%
group_by(member_casual, day_of_week) %>%
summarize(average_ride_length = mean(ride_length, na.rm = TRUE)/60, .groups = "keep")
# Remove NA as day of week
pivot_avg_by_day <- pivot_avg_by_day[!is.na(pivot_avg_by_day$day_of_week), ]
# Change the day_of_week column to display "Sun", "Mon", ..., "Sat"
pivot_avg_by_day$day_of_week <- lubridate::wday(pivot_avg_by_day$day_of_week, label = TRUE)
# Create a bar graph using ggplot2
ggplot(pivot_avg_by_day, aes(x=day_of_week, y=average_ride_length, fill=member_casual)) +
geom_col(position="dodge") +
ggtitle("Average Ride Time by Day of Week") +
labs(x="Day of Week", y="Average Ride Length", fill="Member Type") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
str(pivot_avg_by_day)
View(pivot_avg_by_day)
# Create pivot table
pivot_bike_type <- data %>%
filter(!is.na(rideable_type)) %>%
group_by(member_casual,rideable_type) %>%
summarise(
num_rides = n()
)
# Create a bar graph of number of rides per month using ggplot2
# Note: use this to scale in units of 1,000: scale_y_continuous(labels = function(y) y / 1000)
ggplot(pivot_bike_type, aes(x=rideable_type, y=num_rides, fill=member_casual)) +
geom_col(position="dodge") +
ggtitle("Total Number of Rides by Bike Type in 2023") +
labs(x="Month of Year", y="Number of Rides (in thousands)", fill="Member Type") +
scale_y_continuous(labels = function(y) y / 1000) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_text(vjust = -1)) +
theme(plot.title = element_text(hjust = 0.5))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(lubridate)
# Create pivot table
pivot_avg_by_day <- data %>%
group_by(member_casual, day_of_week) %>%
summarize(average_ride_length = mean(ride_length, na.rm = TRUE)/60, .groups = "keep")
# Remove NA as day of week
pivot_avg_by_day <- pivot_avg_by_day[!is.na(pivot_avg_by_day$day_of_week), ]
# Change the day_of_week column to display "Sun", "Mon", ..., "Sat"
pivot_avg_by_day$day_of_week <- factor(lubridate::wday(pivot_avg_by_day$day_of_week, label = TRUE), levels = c("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"))
# Create a bar graph using ggplot2
ggplot(pivot_avg_by_day, aes(x=day_of_week, y=average_ride_length, fill=member_casual)) +
geom_col(position="dodge") +
ggtitle("Average Ride Time by Day of Week") +
labs(x="Day of Week", y="Average Ride Length", fill="Member Type") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Create Pivot tables
#  Pivot by Member type
library(dplyr)
pivot_member_type <- dplyr::group_by(data, member_casual) %>% dplyr::summarize(average_ride_length = mean(ride_length, na.rm = TRUE)/60)
knitr::kable(pivot_member_type)
View(pivot_member_type)
# Create Pivot tables
#  Pivot by Member type
library(dplyr)
pivot_member_type <- dplyr::group_by(data, member_casual) %>% dplyr::summarize(average_ride_length = mean(ride_length, na.rm = TRUE)/60)
### Load required packages
# List of packages
packages <- c(
"data.table",
"stringr",
"dplyr",
"ggplot2",
"lubridate",
"dplyr",
"tidyverse"
)
# Function to check and install packages
check_and_install <- function(pkg){
if(!pkg %in% installed.packages()){
install.packages(pkg)
}
}
# Apply the function to each package
sapply(packages, check_and_install)
# Load the packages
lapply(packages, library, character.only = TRUE)
### End Load Packages
# Read in cyclistic data from csv file
data <- read.csv("../data/2023_data_cyclistic.csv")
# I switched to use an RData file since it is much more efficient
# For some reason, this isn't working
# data <- load("../data/2023_data_cyclistic.RData")
rm(data)
# Load the data
data <- read.csv("../data/2023_data_cyclistic.csv")
# Check the structure of the data
str(data)
# Convert 'started_at' and 'ended_at' from string to date format
data$started_at <- as.POSIXct(data$started_at, format="%Y-%m-%d %H:%M:%S")
data$ended_at <- as.POSIXct(data$ended_at, format="%Y-%m-%d %H:%M:%S")
# Create 'ride_length' column
data$ride_length <- as.numeric(difftime(data$ended_at, data$started_at, units = "secs"))
# Create 'day_of_week' column
data$day_of_week <- wday(data$started_at)
# Create 'month_of_year' column
data$started_at <- as.Date(data$started_at)
data$month_of_year <- format(data$started_at, "%Y-%m")
# Save the transformed data
save(data, file="../data/2023_data_cyclistic.RData") # file size-189 MB
write.csv(data,"../data/2023_data_cyclistic.csv") # file size-1.2 GB
# Calculate mean, minimum, and maximum ride lengths
mean_ride_length <- mean(data$ride_length[data$ride_length > 0], na.rm = TRUE)/60 # 18.18 minutes
min_ride_length <- min(data$ride_length[data$ride_length > 0], na.rm = TRUE)/60 # 0.0167 minutes
max_ride_length <- max(data$ride_length[data$ride_length > 0], na.rm = TRUE)/60 # 98,489.07 minutes
# Function to calculate mode
find_mode <- function(x) {
u <- unique(x)
u[which.max(tabulate(match(x, u)))]
}
# Find the mode of the day_of_week
find_mode(data$day_of_week) # 7 (Saturday)
temp <- head(data)
View(temp)
data$X.5 <- NULL
data$X.4 <- NULL
data$X.3 <- NULL
data$X.2 <- NULL
data$X.1 <- NULL
data$X.0 <- NULL
temp <- head(data)
data$X <- NULL
temp <- head(data)
str(temp)
temp2 <- read.cvs("../data/2023_data_cyclistic.csv", nrows=10)
temp2 <- read.csv("../data/2023_data_cyclistic.csv", nrows=10)
str(temp2)
View(temp)
## Open 12 csv files (Jan to Dec 2023 and merge into one csv file)
library(data.table)
temp <- lapply(files,fread,sep=",")
getwd()
## Open 12 csv files (Jan to Dec 2023 and merge into one csv file)
# library(data.table)
# files <- list.files(pattern = ".csv")
# temp <- lapply(files,fread,sep=",")
# data <- rbindlist(temp)
# write.csv(data,file="../data/2023_data_cyclistic.csv",row.names = FALSE)
## Open 12 csv files (Jan to Dec 2023 and merge into one csv file)
library(data.table)
# Specify the path to the directory
files <- list.files(path = "../data-raw", pattern = ".csv")
temp <- lapply(files, function(x) fread(paste0("../data-raw/", x), sep = ","))
data <- rbindlist(temp)
write.csv(data, file = "../data/2023_data_cyclistic.csv", row.names = FALSE)
temp2 <- read.csv("../data/2023_data_cyclistic.csv", nrows=10)
View(temp2)
data$started_at <- as.POSIXct(data$started_at, format="%Y-%m-%d %H:%M:%S")
data$ended_at <- as.POSIXct(data$ended_at, format="%Y-%m-%d %H:%M:%S")
# Create 'ride_length' column
data$ride_length <- as.numeric(difftime(data$ended_at, data$started_at, units = "secs"))
temp <- head(data)
View(temp)
# Create 'day_of_week' column
data$day_of_week <- wday(data$started_at)
# Create 'month_of_year' column
data$month_of_year <- format(data$started_at, "%Y-%m")
temp <- head(data)
# Create Pivot tables
#  Pivot by Member type
pivot_member_type <- dplyr::group_by(data, member_casual) %>% dplyr::summarize(average_ride_length = mean(ride_length, na.rm = TRUE)/60)
knitr::kable(pivot_member_type)
